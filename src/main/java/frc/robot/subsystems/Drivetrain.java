// RobotBuilder Version: 3.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package frc.robot.subsystems;


import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.revrobotics.CANError;
import com.revrobotics.CANSparkMax.IdleMode;
import com.revrobotics.CANSparkMax;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Drivetrain extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private CANSparkMax leftrear;
private CANSparkMax leftFront;
private SpeedControllerGroup leftSpeedControlerGroup;
private CANSparkMax rightRear;
private CANSparkMax rightFront;
private SpeedControllerGroup rightSpeedControlerGroup;
private DifferentialDrive differentialDrive1;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
    *
    */
    public Drivetrain() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
leftrear = new CANSparkMax(4, MotorType.kBrushless);
 
 leftrear.restoreFactoryDefaults();  
leftrear.setInverted(false);
leftrear.setIdleMode(IdleMode.kCoast);
  

leftFront = new CANSparkMax(5, MotorType.kBrushless);
 
 leftFront.restoreFactoryDefaults();  
leftFront.setInverted(false);
leftFront.setIdleMode(IdleMode.kCoast);
  

SpeedControllerGroup leftSpeedControlerGroup = new SpeedControllerGroup(leftrear, leftFront  );
 addChild("leftSpeedControlerGroup",leftSpeedControlerGroup);
 

rightRear = new CANSparkMax(6, MotorType.kBrushless);
 
 rightRear.restoreFactoryDefaults();  
rightRear.setInverted(false);
rightRear.setIdleMode(IdleMode.kCoast);
  

rightFront = new CANSparkMax(7, MotorType.kBrushless);
 
 rightFront.restoreFactoryDefaults();  
rightFront.setInverted(false);
rightFront.setIdleMode(IdleMode.kCoast);
  

SpeedControllerGroup rightSpeedControlerGroup = new SpeedControllerGroup(rightRear, rightFront  );
 addChild("rightSpeedControlerGroup",rightSpeedControlerGroup);
 

differentialDrive1 = new DifferentialDrive(leftSpeedControlerGroup, leftrear);
 addChild("Differential Drive 1",differentialDrive1);
 differentialDrive1.setSafetyEnabled(true);
differentialDrive1.setExpiration(0.1);
differentialDrive1.setMaxOutput(1.0);



    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void my_DriveTankDrive(double leftSpeed, double rightSpeed) {
        differentialDrive1.tankDrive(leftSpeed, -rightSpeed);
    }

}

